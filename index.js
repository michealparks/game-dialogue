const e=new Intl.DateTimeFormat("en-US",{year:"numeric",month:"numeric",day:"numeric",hour:"numeric",minute:"numeric",dateStyle:"short",timeStyle:"short"});window.customElements.define("chat-widget",class extends HTMLElement{constructor(e){super(e),this.listeners=[],this.pendingMessages={remote:void 0,user:void 0},this.root=this.attachShadow({mode:"open"}),this.root.innerHTML='\n      <style>\n* {\n  --light-gray: #eee;\n  --light-blue: rgba(79, 195, 247, 0.5);\n  --dot-size: 10px;\n}\n\n:root {\n  overflow: hidden;\n  position: absolute;\n  height: 100%;\n  width: 100%;\n  margin: 0;\n}\n\n* {\n  font-size: 16px;\n  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n}\n\n*:not(style) {\n  display: block;\n  box-sizing: border-box;\n}\n\nmessages-box {\n  overflow-y: auto;\n  position: absolute;\n  width: 100%;\n  height: calc(100% - 50px);\n  padding: 15px;\n  background-color: var(--light-gray);\n}\n\ninput-box {\n  display: flex;\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  background-color: #fff;\n}\n\ninput-box input {\n  height: 50px;\n  width: calc(100% - 50px);\n  padding: 15px;\n  margin: 0;\n  border: 0;\n  background-color: transparent;\n  outline: none;\n}\n\ninput-box button {\n  display: flex;\n  justify-content: center;\n  width: 50px;\n  padding: 0;\n  border: 0;\n  background: transparent;\n  outline: 0;\n}\n\nmessage-bubble.right {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n}\n\nmessage-text {\n  position: relative;\n  width: fit-content;\n  max-width: 75%;\n  padding: 10px 15px;\n  border-radius: 4px;\n  box-shadow: -9px 9px 30px 1px rgba(0,0,0,0.2);\n}\n\nmessage-text:after {\n  position: absolute;\n  bottom: 0;\n  content: \'\';\n  width: 0;\n  height: 0;\n  border-style: solid;\n}\n\nmessage-bubble.left message-text {\n  background-color: var(--light-gray);\n  border-bottom-left-radius: 0px;\n}\n\nmessage-bubble.right message-text {\n  background-color: var(--light-blue);\n  border-bottom-right-radius: 0px;\n}\n\nmessage-bubble.left message-text:after {\n  left: -8px;\n  border-width: 0 0 8px 8px;\n  border-color: transparent transparent var(--light-gray) transparent;\n}\n\nmessage-bubble.right message-text:after {\n  right: -8px;\n  border-width: 8px 0 0 8px;\n  border-color: transparent transparent transparent var(--light-blue);\n}\n\nmessage-timestamp {\n  padding: 5px 15px 15px;\n  font-size: 12px;\n}\n\n.dot {\n  display: inline-block;\n  width: var(--dot-size);\n  height: var(--dot-size);\n  margin: 2px 0;\n  border-radius: 100%;\n  background-color: #aaa;\n  animation-name: pulse;\n  animation-duration: 1s;\n  animation-iteration-count: infinite;\n}\n\n.dot:nth-child(2) { animation-delay: 200ms;  }\n.dot:nth-child(3) { animation-delay: 400ms; }\n\n@keyframes pulse {\n  0%  { opacity: 0.5;  }\n  50% { opacity: 1.0;  }\n  100% { opacity: 0.5; }\n}\n</style>\n      <messages-box></messages-box>\n      <input-box>\n        <input type="text" placeholder="Send a message">\n        <button>\n          <svg\n            width="24"\n            height="24"\n            viewBox="0 0 24 24"\n            fill="none"\n            stroke="#555"\n            stroke-width="2"\n            stroke-linecap="round"\n            stroke-linejoin="round">\n            <line x1="22" y1="2" x2="11" y2="13" />\n            <polygon points="22 2 15 22 11 13 2 9 22 2" />\n          </svg>\n        </button>\n      </input-box>\n    '}connectedCallback(){this.messagesBox=this.root.querySelector("messages-box"),this.input=this.root.querySelector("input-box input"),this.button=this.root.querySelector("input-box button");const e=()=>{if(""===this.input.value)return;const e=this.input.value;this.startMessage({origin:"user"}),this.commitMessage({text:e,origin:"user"});for(const n of this.listeners)n(e);this.input.value=""};this.input.addEventListener("keydown",n=>{"Enter"===n.key&&e()},{passive:!0}),this.messagesBox.addEventListener("pointerdown",this.input.blur,{passive:!0}),this.button.addEventListener("click",n=>{e(),this.input.focus()},{passive:!0})}onUserInput(e){this.listeners.push(e)}startMessage({origin:e="remote"}){const n=document.createElement("message-bubble");n.classList.add("empty"),n.classList.add("remote"===e?"left":"right"),n.innerHTML='\n      <message-text>\n        <div class="dot"></div>\n        <div class="dot"></div>\n        <div class="dot"></div>\n      </message-text>\n      <message-timestamp></message-timestamp>\n    ',this.pendingMessages[e]=n,this.messagesBox.appendChild(n),n.scrollIntoView()}commitMessage({text:n="",origin:t="remote"}){const s=this.pendingMessages[t];s.querySelector("message-text").innerHTML=n,s.querySelector("message-timestamp").textContent=e.format(new Date),s.classList.remove("empty"),s.scrollIntoView()}});(async()=>{const e={};let n,t="";const s=await window.fetch("./dialogue.json"),o=await s.json(),{textItems:i,defaultSleepFor:a,defaultSleepBefore:r,variables:l}=o,d=e=>new Promise(n=>{setTimeout(n,1e3*e)}),p=()=>new Promise(e=>{n=e}),c=async n=>{const{text:s,sleepFor:i=a,sleepBefore:m=r,saveInputAs:g,waitFor:h=[],waitForAnyInput:b=!1,defaultResponses:x=o.defaultResponses}=n;if(s&&u.startMessage({origin:"remote"}),m&&await d(m),t=s,t){for(const[n,s]of Object.entries(e))t=t.replace(`{${n}}`,s);u.commitMessage({text:t})}for(g&&(e[g]=await p());h.length>0;){const n=await p();let t;for(const s of h){let o=[...s.acceptedInputs];for(const[e,n]of Object.entries(l))o.includes(e)&&(o.splice(o.indexOf(e),1),o=[...o,...n]);for(const i of o)if(n.toLowerCase().includes(i.toLowerCase())){t=s,h.splice(h.indexOf(s),1),s.saveInputAs&&(e[s.saveInputAs]=n.toLowerCase()),console.log(e);break}}if(t&&t.text)await c(t);else if(!t){const e=Math.random()*x.length|0;await c(x[e])}}b&&await p(),await d(i)};document.head.querySelector("title").textContent="Koschei Society";const u=document.createElement("chat-widget");document.body.appendChild(u),u.onUserInput(e=>{n&&n(e)});for(const e of i)await c(e)})();
